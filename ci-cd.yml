name: FlagExplorer CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
      
    # Restore all projects
    - name: Restore dependencies
      run: dotnet restore
      
    # Build all projects
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    # Enhanced testing with multiple report formats
    - name: Test Backend
      run: |
        cd FlagExplorer.API.Tests
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=backend_results.trx" \
          --logger "html;LogFileName=backend_report.html" \
          --logger "junit;LogFileName=backend_junit.xml" \
          --results-directory TestResults \
          --blame-hang-timeout 2min \
          --blame-hang-dump-type full
      
    - name: Test Frontend
      run: |
        cd FlagExplorer.Web.Tests
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=frontend_results.trx" \
          --logger "html;LogFileName=frontend_report.html" \
          --logger "junit;LogFileName=frontend_junit.xml" \
          --results-directory TestResults \
          --blame-hang-timeout 2min \
          --blame-hang-dump-type full
      
    # Publish test results to GitHub UI
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: "**/TestResults/*.trx"
        reporter: dotnet-trx
        fail-on-error: false
      
    # Generate coverage report
    - name: Generate Coverage Report
      run: |
        dotnet reportgenerator \
          -reports:**/TestResults/**/coverage.cobertura.xml \
          -targetdir:./CoverageReport \
          -reporttypes:"Html;HtmlSummary;SonarQube;MarkdownSummary"
    - name: Debug - Show Files
  run: |
    echo "=== Consolidated folder contents ==="
    ls -R consolidated-test-results
    echo "=== Coverage files ==="
    find . -name "coverage.*"
    # Upload all test artifacts
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-artifacts
        path: |
          **/TestResults/*
          ./CoverageReport
        retention-days: 7
    # Add this right after your test steps (before publishing)
    - name: Find and Prepare Test Results
  run: |
    echo "=== Test result files ==="
    find . -name "*.trx" -o -name "*.html" -o -name "*.xml"
    mkdir -p consolidated-test-results
    cp **/TestResults/*.trx consolidated-test-results/
    cp **/TestResults/*.html consolidated-test-results/
    cp **/TestResults/*.xml consolidated-test-results/

    - name: Upload Test Results
         uses: actions/upload-artifact@v4
         if: always()
          with:
          name: test-results
         path: |
      consolidated-test-results/*
      **/coverage*.xml
    retention-days: 3
    
    # Publishing
    - name: Publish Backend
      run: dotnet publish ./FlagExplorer.API/FlagExplorer.API.csproj -c Release -o ./publish/api
      
    - name: Publish Frontend
      run: dotnet publish ./FlagExplorer.Web/FlagExplorer.Web.csproj -c Release -o ./publish/web
      
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: ./publish
        retention-days: 7
    
    # Test success threshold check
    - name: Verify Test Thresholds
      run: |
        # Minimum test pass percentage (adjust as needed)
        MIN_PASS_PERCENTAGE=90
        
        # Calculate pass percentage from JUnit reports
        PASS_PERCENTAGE=$(grep -h -oP '(?<=failures=")[^"]*' **/TestResults/*junit.xml | awk '{ fails+=$1; total+=1 } END { print (total-fails)/total*100 }')
        
        if (( $(echo "$PASS_PERCENTAGE < $MIN_PASS_PERCENTAGE" | bc -l) )); then
          echo "::error::Test pass percentage ($PASS_PERCENTAGE%) below required threshold ($MIN_PASS_PERCENTAGE%)"
          exit 1
        else
          echo "Test pass percentage ($PASS_PERCENTAGE%) meets requirement ($MIN_PASS_PERCENTAGE%)"
        fi